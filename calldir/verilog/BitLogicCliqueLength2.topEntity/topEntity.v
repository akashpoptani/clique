/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.5. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input  clk // clock
    , input  rst // reset
    , input  en // enable
    , input  c$arg_0
    , input  c$arg_1
    , input  c$arg_2
    , input  c$arg_3
    , input  c$arg_4
    , input  c$arg_5
    , input  c$arg_6
    , input  c$arg_7
    , input  c$arg_8
    , input  c$arg_9
    , input  c$arg_10
    , input  c$arg_11
    , input  c$arg_12

      // Outputs
    , output wire  result_0
    , output wire  result_1
    , output wire  result_2
    , output wire  result_3
    , output wire  result_4
    , output wire  result_5
    );
  // ../cliquelength2v1.hs:(91,1)-(94,46)
  reg [3:0] c$ds_app_arg = {2'd1,   1'b0,   1'b0};
  reg [1:0] c$app_arg;
  wire  c$case_alt;
  reg  c$app_arg_0;
  wire [9:0] result_12;
  // ../cliquelength2v1.hs:73:1-24
  wire  p1;
  // ../cliquelength2v1.hs:73:1-24
  wire  q1;
  // ../cliquelength2v1.hs:73:1-24
  wire  r1;
  // ../cliquelength2v1.hs:73:1-24
  wire  s1;
  // ../cliquelength2v1.hs:73:1-24
  wire  t1;
  // ../cliquelength2v1.hs:73:1-24
  wire  pbar1;
  // ../cliquelength2v1.hs:73:1-24
  wire  pq1;
  // ../cliquelength2v1.hs:73:1-24
  wire  qbar1;
  // ../cliquelength2v1.hs:73:1-24
  wire  qs1;
  // ../cliquelength2v1.hs:73:1-24
  wire  sbar1;
  // ../cliquelength2v1.hs:73:1-24
  wire  rs1;
  // ../cliquelength2v1.hs:73:1-24
  wire  rbar1;
  // ../cliquelength2v1.hs:73:1-24
  wire  pr1;
  // ../cliquelength2v1.hs:73:1-24
  wire [1:0] cnt;
  // ../cliquelength2v1.hs:73:1-24
  wire  prev1;
  // ../cliquelength2v1.hs:73:1-24
  wire  prev2;
  // ../cliquelength2v1.hs:73:1-24
  wire  complexOrSimple;
  wire [4:0] result_13;
  wire  c$app_arg_1;
  wire  c$app_arg_2;
  wire  c$app_arg_3;
  wire  c$app_arg_4;
  wire  c$app_arg_5;
  wire  c$case_scrut;
  wire  c$app_arg_6;
  // ../cliquelength2v1.hs:29:1-29
  wire  fallbackActive;
  wire  c$app_arg_7;
  wire  c$app_arg_8;
  // ../cliquelength2v1.hs:29:1-29
  wire  c$fallbackActive_app_arg;
  // ../cliquelength2v1.hs:29:1-29
  wire  c$fallbackActive_app_arg_0;
  // ../cliquelength2v1.hs:29:1-29
  wire  xorResult;
  wire [12:0] c$arg;
  wire [5:0] result;

  assign c$arg = {c$arg_0,   c$arg_1,
                  c$arg_2,   c$arg_3,   c$arg_4,   c$arg_5,
                  c$arg_6,   c$arg_7,   c$arg_8,   c$arg_9,
                  c$arg_10,   c$arg_11,   c$arg_12};

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$ds_app_arg_register
    if ( rst) begin
      c$ds_app_arg <= {2'd1,   1'b0,   1'b0};
    end else if (en) begin
      c$ds_app_arg <= result_12[9:6];
    end
  end
  // register end

  assign result = result_12[5:0];

  always @(*) begin
    case(cnt)
      2'd3 : c$app_arg = 2'd1;
      default : c$app_arg = cnt + 2'd1;
    endcase
  end

  assign c$case_alt = ((complexOrSimple == (1'b0)) & ((prev1 == (1'b0)) & (prev2 == (1'b0)))) ? (1'b1) : (1'b0);

  always @(*) begin
    case(cnt)
      2'd3 : c$app_arg_0 = c$case_alt;
      default : c$app_arg_0 = 1'b0;
    endcase
  end

  assign result_12 = {{c$app_arg,
                       complexOrSimple,   prev1},   {result_13[4:4],
                                                     result_13[3:3],   result_13[2:2],
                                                     result_13[1:1],   complexOrSimple,
                                                     c$app_arg_0}};

  assign p1 = c$arg[12:12];

  assign q1 = c$arg[11:11];

  assign r1 = c$arg[10:10];

  assign s1 = c$arg[9:9];

  assign t1 = c$arg[8:8];

  assign pbar1 = c$arg[7:7];

  assign pq1 = c$arg[6:6];

  assign qbar1 = c$arg[5:5];

  assign qs1 = c$arg[4:4];

  assign sbar1 = c$arg[3:3];

  assign rs1 = c$arg[2:2];

  assign rbar1 = c$arg[1:1];

  assign pr1 = c$arg[0:0];

  assign cnt = c$ds_app_arg[3:2];

  assign prev1 = c$ds_app_arg[1:1];

  assign prev2 = c$ds_app_arg[0:0];

  assign complexOrSimple = result_13[0:0];

  assign result_13 = {c$app_arg_5,   c$app_arg_3,
                      c$app_arg_2,   c$app_arg_1,
                      (t1 & c$fallbackActive_app_arg_0) | fallbackActive};

  assign c$app_arg_1 = c$case_scrut ? (c$app_arg_6 & s1) : (fallbackActive & (c$app_arg_7 & (~ ((sbar1 ^ rs1) ^ qs1))));

  assign c$app_arg_2 = c$case_scrut ? (c$app_arg_6 & r1) : (fallbackActive & ((c$app_arg_8 | c$app_arg_4) & (~ ((rbar1 ^ rs1) ^ pr1))));

  assign c$app_arg_3 = c$case_scrut ? (c$app_arg_6 & q1) : (fallbackActive & ((c$fallbackActive_app_arg | c$app_arg_4) & (~ ((qbar1 ^ pq1) ^ qs1))));

  assign c$app_arg_4 = q1 & r1;

  assign c$app_arg_5 = c$case_scrut ? (c$app_arg_6 & p1) : (fallbackActive & (((c$app_arg_8 | c$app_arg_7) | c$fallbackActive_app_arg) & (~ ((pbar1 ^ pq1) ^ pr1))));

  assign c$case_scrut = t1 == (1'b1);

  assign c$app_arg_6 = t1 & xorResult;

  assign fallbackActive = ((~ t1) & c$fallbackActive_app_arg_0) & (~ ((c$fallbackActive_app_arg & r1) & s1));

  assign c$app_arg_7 = p1 & s1;

  assign c$app_arg_8 = p1 & r1;

  assign c$fallbackActive_app_arg = p1 & q1;

  assign c$fallbackActive_app_arg_0 = ~ xorResult;

  assign xorResult = ((p1 ^ q1) ^ r1) ^ s1;

  assign result_0 = result[5:5];

  assign result_1 = result[4:4];

  assign result_2 = result[3:3];

  assign result_3 = result[2:2];

  assign result_4 = result[1:1];

  assign result_5 = result[0:0];


endmodule

